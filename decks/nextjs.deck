deck:
  - front: |
      What is `getStaticProps` in Next.js?
    back: |
      `getStaticProps` is a function that, if exported from a page in a Next.js application, will cause Next.js to pre-render that page at build time using the props returned by the function. It's used for Static Site Generation (SSG).
  - front: |
      How to use `getStaticProps`? Provide an example.
    back: |
      Export an `async` function called `getStaticProps` from a page.  Inside this function, fetch data and return it as a `props` object.

      ```typescript
      // pages/index.tsx
      import type { InferGetStaticPropsType, GetStaticProps } from 'next'

      type Repo = {
        name: string
        stargazers_count: number
      }

      export const getStaticProps = (async (context) => {
        const res = await fetch('https://api.github.com/repos/vercel/next.js')
        const repo = await res.json()
        return { props: { repo } }
      }) satisfies GetStaticProps<{
        repo: Repo
      }>

      export default function Page({
        repo,
      }: InferGetStaticPropsType<typeof getStaticProps>) {
        return repo.stargazers_count
      }
      ```
  - front: |
      When should you use `getStaticProps`?
    back: |
      - The data required to render the page is available at build time.
      - The data comes from a headless CMS.
      - The page must be pre-rendered (for SEO) and be very fast.
      - The data can be publicly cached (not user-specific).
  - front: |
      When does `getStaticProps` run?
    back: |
      - `getStaticProps` always runs on the server and never on the client.
      - During `next build`.
      - In the background when using `fallback: true` in `getStaticPaths`.
      - Before initial render when using `fallback: blocking` in `getStaticPaths`.
      - In the background when using `revalidate` (Incremental Static Regeneration).
      - On-demand in the background when using `revalidate()`(On-Demand Incremental Static Regeneration).
  - front: |
      Does `getStaticProps` have access to the incoming request?
    back: |
      No, `getStaticProps` does *not* have access to the incoming request (e.g., query parameters or HTTP headers) because it generates static HTML. If you need the request, consider using Middleware in addition to `getStaticProps`.
  - front: |
      How can you fetch data from a CMS using `getStaticProps`? Show a code example.
    back: |
      ```typescript
      // pages/blog.tsx
      export default function Blog({ posts }) {
        return (
          <ul>
            {posts.map((post) => (
              <li>{post.title}</li>
            ))}
          </ul>
        )
      }

      export async function getStaticProps() {
        const res = await fetch('https://.../posts')
        const posts = await res.json()

        return {
          props: {
            posts,
          },
        }
      }
      ```
  - front: |
      Where should you write server-side code that `getStaticProps` uses?
    back: |
      You can write server-side code directly within `getStaticProps` because it runs only on the server-side and won't be included in the client-side bundle.  For reusable logic, place the code in a separate file (e.g., in a `lib/` directory) and import it into `getStaticProps`.
  - front: |
      Show example of a `lib/` file that can be used from `getStaticProps`.
    back: |
      ```javascript
      // lib/load-posts.js
      export async function loadPosts() {
        // Call an external API endpoint to get posts
        const res = await fetch('https://.../posts/')
        const data = await res.json()
        return data
      }
      ```

      ```javascript
      // pages/blog.js
      import { loadPosts } from '../lib/load-posts'

      export async function getStaticProps() {
        const posts = await loadPosts()
        return { props: { posts } }
      }

      // ... rest of your component
      ```
  - front: |
      What files does Next.js generate when a page uses `getStaticProps`?
    back: |
      Next.js generates both an HTML file and a JSON file. The JSON file holds the result of running `getStaticProps`. This JSON file is used for client-side navigation.
  - front: |
      Will client-side page transitions call `getStaticProps`?
    back: |
      No, client-side page transitions using `next/link` or `next/router` will *not* call `getStaticProps`.  They will use the pre-computed JSON file generated at build time.
  - front: |
      Where can `getStaticProps` be used?
    back: |
      `getStaticProps` can *only* be exported from a *page* file.  It cannot be exported from non-page files, and it cannot be a property of the page component.
  - front: |
      How does `getStaticProps` behave in development mode (`next dev`)?
    back: |
      In development mode (`next dev`), `getStaticProps` will be called on *every* request.
  - front: What is "Preview Mode" in Next.js and how does it relate to `getStaticProps`?
    back: |
      Preview Mode allows you to bypass static generation and render the page at *request time* instead of build time. It is useful, for example, for previewing drafts in a headless CMS.
  - front: |
      What is `getStaticPaths` in Next.js?
    back: |
      `getStaticPaths` is a function used in pages with *dynamic routes* that also use `getStaticProps`.  It defines a list of paths to be statically generated at build time.
  - front: |
      How does `getStaticPaths` relate with dynamic routes? Provide an example.
    back: |
      ```typescript
      // pages/repo/[name].tsx
      import type {
        InferGetStaticPropsType,
        GetStaticProps,
        GetStaticPaths,
      } from 'next'

      type Repo = {
        name: string
        stargazers_count: number
      }

      export const getStaticPaths = (async () => {
        return {
          paths: [
            {
              params: {
                name: 'next.js',
              },
            },
          ],
          fallback: true, // or false or "blocking"
        }
      }) satisfies GetStaticPaths

      export const getStaticProps = (async (context) => {
        const res = await fetch('https://api.github.com/repos/vercel/next.js')
        const repo = await res.json()

        return { props: { repo } }
      }) satisfies GetStaticProps<{
        repo: Repo
      }>

      export default function Page({
        repo,
      }: InferGetStaticPropsType<typeof getStaticProps>) {
        return repo.stargazers_count
      }

      ```
  - front: |
      When should you use `getStaticPaths`?
    back: |
      You should use `getStaticPaths` if you're statically pre-rendering pages that use dynamic routes and:
      - The data comes from a headless CMS, database, or filesystem.
      - The data can be publicly cached.
      - The page must be pre-rendered (for SEO) and be very fast.
  - front: |
      When does `getStaticPaths` run?
    back: |
      `getStaticPaths` runs only during build time in production.  It is *not* called during runtime.
  - front: |
      How does `getStaticProps` run in relation to `getStaticPaths`?
    back: |
      - `getStaticProps` runs during `next build` for any `paths` returned by `getStaticPaths`.
      - `getStaticProps` runs in the background when using `fallback: true` in `getStaticPaths`.
      - `getStaticProps` is called before initial render when using `fallback: blocking` in `getStaticPaths`.
  - front: |
      What are the restrictions on using `getStaticPaths`?
    back: |
      - `getStaticPaths` *must* be used with `getStaticProps`.
      - You *cannot* use `getStaticPaths` with `getServerSideProps`.
      - You can only export `getStaticPaths` from a dynamic route page that also uses `getStaticProps`.
      - It must be a standalone function, not a property of the page component.
  - front: |
      How does `getStaticPaths` behave in development mode (`next dev`)?
    back: |
      In development (`next dev`), `getStaticPaths` will be called on every request.
  - front: |
      How can you defer generating all pages on-demand using `getStaticPaths`?
    back: |
      You can return an empty array for `paths` in `getStaticPaths`. This can be useful to speed up builds, especially in preview environments. Example:

      ```javascript
      export async function getStaticPaths() {
        if (process.env.SKIP_BUILD_STATIC_GENERATION) {
          return {
            paths: [],
            fallback: 'blocking',
          }
        }
        // ... your normal logic to fetch paths ...
      }
      ```
  - front: What does the `fallback` property in the object returned by getStaticPaths do?
    back: |
      The `fallback` property is a required property of the object returned by `getStaticPaths`. It determines how Next.js will handle requests for paths *not* returned by `getStaticPaths`. There are three possible values:
      - `false`:  Any paths not returned by `getStaticPaths` will result in a 404 page.
      - `true`:   Next.js will *not* return a 404. Instead, it will serve a "fallback" version of the page on the first request.  In the background, it will call `getStaticProps` and statically generate the requested path. Once done, the browser receives the generated page.  Subsequent requests to the same path will serve the generated page.
      - `'blocking'`:  Similar to `true`, but Next.js will server-side render the page on the first request.  The user will see a loading state until the page is fully rendered.  Then, it's added to the static generation cache, and subsequent requests will be fast.  This avoids showing a fallback state.